AWSTemplateFormatVersion: '2010-09-09'

Description: This AWS CloudFormation Template configures an environment that can be used for the Container DevSecOps workshop. 

Parameters:
  
  ResourceName:
    Type: String
    Default: container-devsecops-wksp
    AllowedValues: 
      - container-devsecops-wksp
    Description: Prefix of Resources created for this workshop.

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - 
        Label: 
          default: "Resource and Notification Configuration"
        Parameters: 
          - ResourceName

    ParameterLabels: 
      ResourceName:
        default: "Resource Prefix"


Mappings: {}

Conditions: {}

Resources:

  ################### Repo Resources ###################

  ### CodeCommit Repository
  Repository: 
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: Sample application repository to support the container devsecops workshop.
      RepositoryName: !Join [ '-', [ !Ref ResourceName, 'repo'  ] ]

  ### Initial commit to sample application - Custom resource
  RepositoryInitialCommit:
    DependsOn: Repository
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt 'LambdaRepositoryInitialCommit.Arn'
      Repo: !Join [ '-', [ !Ref ResourceName, 'repo'  ] ]

  ### Initial commit to sample application - Lambda Role
  LambdaRepositoryInitialCommitRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref ResourceName, 'lambda', 'initial-commit'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: RemediationPolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                Resource: '*'

  ### Initial commit to sample application - Lambda
  LambdaRepositoryInitialCommit: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Join [ '-', [ !Ref ResourceName, 'initial-commit'  ] ]
      Handler: "initial-commit.handler"
      Environment:
        Variables:
          PREFIX: !Ref ResourceName
      Role: !GetAtt 'LambdaRepositoryInitialCommitRole.Arn'
      Code: 
        S3Bucket: 'sa-security-specialist-workshops-us-east-2'
        S3Key: 'devsecops/containers/initial-commit.py.zip'
      Runtime: "python2.7"
      Timeout: "35"
  
  ### ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Join [ '-', [ !Ref ResourceName, 'sample'  ] ]

  ################### Attendee IDE - Cloud9 ###################

  ### Cloud9 - Network Infrastructure
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref ResourceName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref ResourceName
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId: !Ref VPC
  RouteTable:
    DependsOn:
      - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  PublicRoute:
    DependsOn:
      - RouteTable
      - GatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  SubnetAssoc:
    DependsOn:
      - Subnet
      - RouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: 
            Fn::Join:
            - '-'
            - [!Ref ResourceName, 'compromised']
        -
          Key: Network
          Value: Public
  InboundPublicNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 0
        To: 65535
  OutboundPublicNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  SubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref PublicNACL

  ### Cloud9 IDE
  Cloud9IDE:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Repositories: 
        - PathComponent: /sample-application
          RepositoryUrl: 
            Fn::GetAtt: 
              - Repository
              - CloneUrlHttp
      Description: This is the IDE you will be using to complete the Container DevSecOps workshop.
      InstanceType: t2.small
      Name: !Join [ '-', [ !Ref ResourceName, 'ide'  ] ]
      SubnetId: !Ref Subnet

  ################### Pipeline ###################

  ### CodePipeline - Artifact Bucket
  PipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName: !Join [ '-', [ !Ref ResourceName, !Ref "AWS::AccountId", !Ref "AWS::Region", 'artifacts'  ] ]

  ### CodePipeline - Service Role
  CodePipelineRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref ResourceName, 'codepipeline', 'service'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - codepipeline.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: ServicePolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListObject
                Resource: [!Join [ '', [ !GetAtt 'PipelineBucket.Arn', '/*'  ] ], !GetAtt 'PipelineBucket.Arn' ]
              -
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt 'CodeBuildProject.Arn'
  
  ### CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
      RoleArn: !GetAtt 'CodePipelineRole.Arn'
      Name: !Join [ '-', [ !Ref ResourceName, 'pipeline'  ] ]
      Stages:
        - Name: CodeCommit
          Actions:
            - Name: TemplateSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: "TemplateSource"
              Configuration:
                BranchName: "master"
                RepositoryName: !Join [ '-', [ !Ref ResourceName, 'repo'  ] ]
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Validation
              ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
              OutputArtifacts:
                - Name: !Join [ '-', [ !Ref ResourceName, 'build'  ] ]
              InputArtifacts:
                - Name: "TemplateSource"
              Configuration:
                  ProjectName: !Ref CodeBuildProject
              RunOrder: 1

  ### CodeBuild - Service Role
  CodeBuildRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Join [ '-', [ !Ref ResourceName, 'codebuild', 'service'  ] ]
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - codebuild.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: ServicePolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - 
                Effect: Allow
                Action:
                  - codecommit:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - ecr:*
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListObject
                Resource: [!Join [ '', [ !GetAtt 'PipelineBucket.Arn', '/*'  ] ], !GetAtt 'PipelineBucket.Arn' ]

  ### CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: aws/codebuild/docker:18.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Join [ '-', [ !Ref ResourceName, 'sample'  ] ]
      Name: !Join [ '-', [ !Ref ResourceName, 'build'  ] ]
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Source: 
        Type: CODEPIPELINE

Outputs: {}