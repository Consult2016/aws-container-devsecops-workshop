{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview In this workshop, you will learn how to leverage AWS development tools and open-source projects to integrate automated security testing into a CI/CD pipeline. Learn about a variety of patterns for integrating security testing and security-centric release control into AWS CodePipeline. Additionally, learn how to add feedback loops and fix common security vulnerabilities in your container-based application. Level : Advanced Duration : 2 - 3 hours Prerequisites : AWS Account, Admin IAM User CSF Functions : Prevent, Detect CAF Components : Preventative, Detective AWS Services : Amazon CloudWatch , AWS CodeCommit , AWS CodeBuild , AWS CodePipeline , Amazon ECR , AWS Lambda , and AWS Security Hub Open Source Projects : Hadolint , Trufflehog , and Anchore Scenario Your company has just kicked off a new DevSecOps initiative in an effort to improve the security of critical applications by embedding security in every part of the software development lifecycle. You are part of a DevOps team tasked with integrating security testing into a rudimentary pipeline for building and releasing container images. Your initial tasks include adding in Dockerfile linting, secrets scanning, and vulnerability scanning. The decision has been made to evaluate and make use of open source projects with the possibility of moving to a commercial offering based on how well the requirements are met. Architecture For this workshop you will start with a basic CI/CD pipeline that is triggered on Pull Requests and builds and pushes a container image to an Amazon ECR repository. As you work through the tasks in your latest sprint you'll end up with the CI/CD pipeline as shown below. It will include stages with in your AWS CodePipeline for linting Dockerfiles, scanning for secrets, and scanning for vulnerabilities including integration with AWS Security Hub. In addition you will be using a combination of Amazon CloudWatch Event Rules and Lambda Functions to create feedback loops for each stage of security testing you create. This will allow your developers to quickly fix and iterate on their code which will lead to faster and more secure delivery. Presentation deck Workshop Presentation Deck Region Please use the us-east-2 (Ohio) region for this workshop. Modules This workshop is broken up into the four modules below: Environment Setup Dockerfile Linting Secrets Scanning Vulnerability Scanning Review and Discussion","title":"Overview"},{"location":"#overview","text":"In this workshop, you will learn how to leverage AWS development tools and open-source projects to integrate automated security testing into a CI/CD pipeline. Learn about a variety of patterns for integrating security testing and security-centric release control into AWS CodePipeline. Additionally, learn how to add feedback loops and fix common security vulnerabilities in your container-based application. Level : Advanced Duration : 2 - 3 hours Prerequisites : AWS Account, Admin IAM User CSF Functions : Prevent, Detect CAF Components : Preventative, Detective AWS Services : Amazon CloudWatch , AWS CodeCommit , AWS CodeBuild , AWS CodePipeline , Amazon ECR , AWS Lambda , and AWS Security Hub Open Source Projects : Hadolint , Trufflehog , and Anchore","title":"Overview"},{"location":"#scenario","text":"Your company has just kicked off a new DevSecOps initiative in an effort to improve the security of critical applications by embedding security in every part of the software development lifecycle. You are part of a DevOps team tasked with integrating security testing into a rudimentary pipeline for building and releasing container images. Your initial tasks include adding in Dockerfile linting, secrets scanning, and vulnerability scanning. The decision has been made to evaluate and make use of open source projects with the possibility of moving to a commercial offering based on how well the requirements are met.","title":"Scenario"},{"location":"#architecture","text":"For this workshop you will start with a basic CI/CD pipeline that is triggered on Pull Requests and builds and pushes a container image to an Amazon ECR repository. As you work through the tasks in your latest sprint you'll end up with the CI/CD pipeline as shown below. It will include stages with in your AWS CodePipeline for linting Dockerfiles, scanning for secrets, and scanning for vulnerabilities including integration with AWS Security Hub. In addition you will be using a combination of Amazon CloudWatch Event Rules and Lambda Functions to create feedback loops for each stage of security testing you create. This will allow your developers to quickly fix and iterate on their code which will lead to faster and more secure delivery.","title":"Architecture"},{"location":"#presentation-deck","text":"Workshop Presentation Deck","title":"Presentation deck"},{"location":"#region","text":"Please use the us-east-2 (Ohio) region for this workshop.","title":"Region"},{"location":"#modules","text":"This workshop is broken up into the four modules below: Environment Setup Dockerfile Linting Secrets Scanning Vulnerability Scanning Review and Discussion","title":"Modules"},{"location":"01-env-setup/","text":"Module 1 Environment Setup Time : 15 minutes In the first module you will be configuring the initial pipeline and setting up the Anchore service which you will be integrating the pipeline with later on in this workshop. This module requires you to run two different AWS CloudFormation templates which will automate the creation of the pipeline and Anchore service. You will then walk through each stage and manually configure the security testing. Deploy the Anchore service The first CloudFormation you run will create the Anchore vulnerability scanning service. Before you deploy the CloudFormation template feel free to view it here . Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. On the Specify Details click Next . Once you have entered your parameters click Next , then Next again (leave everything on this page at the default). Finally, acknowledge that the template will create IAM roles and CAPABILITY_AUTO_EXPAND and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. Deploy your pipeline The second CloudFormation you run will create the initial pipeline. Before you deploy the CloudFormation template feel free to view it here . Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. On the Specify Details section enter the necessary parameters as shown below. Parameter Value Stack name container-devsecops-wksp Fail When Select a threshold Once you have entered your parameters click Next , then Next again (leave everything on this page at the default). Finally, acknowledge that the template will create IAM roles and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. Browse to your Cloud9 IDE You will be doing the majority of the workshop using the AWS Command Line Interface (CLI) within AWS Cloud9 , a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. Open the AWS Cloud9 console (us-east-2) Click Open IDE in the container-devsecops-wksp-ide environment. This will take you to your IDE in a new tab. Always keep this tab open Setup your git credentials and clone the repo that contains all the configurations for your pipeline: git config --global credential.helper !aws codecommit credential-helper $@ git config --global credential.UseHttpPath true git clone https://git-codecommit.us-east-2.amazonaws.com/v1/repos/container-devsecops-wksp-config To make life easier on yourself, always keep your IDE tab open and use a different tab for all other activities. Enable AWS Security Hub You will be using AWS Security Hub to manage your container image vulnerabilities. Enable Security Hub aws securityhub enable-security-hub You can browse to AWS CodePipeline to view your current pipeline. All the stages are there but they have not been properly configured. After you have successfully setup your environment, you can proceed to the next module.","title":"Module 1: Environment Setup"},{"location":"01-env-setup/#module-1-environment-setup","text":"Time : 15 minutes In the first module you will be configuring the initial pipeline and setting up the Anchore service which you will be integrating the pipeline with later on in this workshop. This module requires you to run two different AWS CloudFormation templates which will automate the creation of the pipeline and Anchore service. You will then walk through each stage and manually configure the security testing.","title":"Module 1 Environment Setup"},{"location":"01-env-setup/#deploy-the-anchore-service","text":"The first CloudFormation you run will create the Anchore vulnerability scanning service. Before you deploy the CloudFormation template feel free to view it here . Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. On the Specify Details click Next . Once you have entered your parameters click Next , then Next again (leave everything on this page at the default). Finally, acknowledge that the template will create IAM roles and CAPABILITY_AUTO_EXPAND and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status.","title":"Deploy the Anchore service"},{"location":"01-env-setup/#deploy-your-pipeline","text":"The second CloudFormation you run will create the initial pipeline. Before you deploy the CloudFormation template feel free to view it here . Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. On the Specify Details section enter the necessary parameters as shown below. Parameter Value Stack name container-devsecops-wksp Fail When Select a threshold Once you have entered your parameters click Next , then Next again (leave everything on this page at the default). Finally, acknowledge that the template will create IAM roles and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status.","title":"Deploy your pipeline"},{"location":"01-env-setup/#browse-to-your-cloud9-ide","text":"You will be doing the majority of the workshop using the AWS Command Line Interface (CLI) within AWS Cloud9 , a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. Open the AWS Cloud9 console (us-east-2) Click Open IDE in the container-devsecops-wksp-ide environment. This will take you to your IDE in a new tab. Always keep this tab open Setup your git credentials and clone the repo that contains all the configurations for your pipeline: git config --global credential.helper !aws codecommit credential-helper $@ git config --global credential.UseHttpPath true git clone https://git-codecommit.us-east-2.amazonaws.com/v1/repos/container-devsecops-wksp-config To make life easier on yourself, always keep your IDE tab open and use a different tab for all other activities.","title":"Browse to your Cloud9 IDE"},{"location":"01-env-setup/#enable-aws-security-hub","text":"You will be using AWS Security Hub to manage your container image vulnerabilities. Enable Security Hub aws securityhub enable-security-hub You can browse to AWS CodePipeline to view your current pipeline. All the stages are there but they have not been properly configured. After you have successfully setup your environment, you can proceed to the next module.","title":"Enable AWS Security Hub"},{"location":"02-linting/","text":"Module 2 Dockerfile Linting Time : 15 minutes Now that you have your initial pipeline setup, it is time to start integrating security testing. The first stage you'll add is for doing linting of Dockerfiles to help you build best practice Docker images. For linting you'll be leveraging Hadolint , which is a popular open source project for linting Dockerfiles and validating inline bash. The linter parses the Dockerfile into an AST and performs rules on top of the AST. The rules aren't all security specific but they have good coverage across best practices. View your CodeBuild Project For each AWS CodePipeline stage you'll be using AWS CodeBuild , which is a continuous integration service that compiles source code, runs tests, and produces software packages that are ready to deploy. The CodeBuild project for Dockerfile linting has already been created but hasn't been properly configured. Click here to view your CodeBuild project Create the Build Spec file Each CodeBuild project contains a build specification (build spec) file, which is a collection of build commands and related settings, in YAML format, that CodeBuild uses to run a build. This is the file where you define the commands for doing Dockerfile linting using Hadolint. Click on your Cloud9 IDE tab. In the left file tree, expand the container-devsecops-wksp-config folder and open buildspec_dockerfile.yml . Paste the YAML below and save the file. version : 0.2 phases : pre_build : commands : - echo Copying hadolint.yml to the application directory - cp hadolint.yml $CODEBUILD_SRC_DIR_AppSource/hadolint.yml - echo Switching to the application directory - cd $CODEBUILD_SRC_DIR_AppSource - echo Pulling the hadolint docker image - docker pull hadolint/hadolint:v1.16.2 build : commands : - echo Build started on `date` - echo Scanning with Hadolint... - result=`docker run --rm -i -v ${PWD}/hadolint.yml:/.hadolint.yaml hadolint/hadolint:v1.16.2 hadolint -f json - Dockerfile` post_build : commands : - echo $result - aws ssm put-parameter --name codebuild-dockerfile-results --type String --value $result --overwrite - echo Build completed on `date` Add the Hadolint configuration When using Hadolint you can optionally specify a configuration file to ignore certain rules you might not necessary care about as well as specify trusted registries. You can view all the current rules by scrolling down on the Hadolint github project In the left file tree, expand the container-devsecops-wksp-config folder and open hadolint.yml . Paste the YAML below and save the file. ignored : - DL3000 - DL3025 trustedRegistries : - examplecorp.com After you have successfully configured the Dockerfile linting stage, you can proceed to the next module.","title":"Module 2: Dockerfile Linting"},{"location":"02-linting/#module-2-dockerfile-linting","text":"Time : 15 minutes Now that you have your initial pipeline setup, it is time to start integrating security testing. The first stage you'll add is for doing linting of Dockerfiles to help you build best practice Docker images. For linting you'll be leveraging Hadolint , which is a popular open source project for linting Dockerfiles and validating inline bash. The linter parses the Dockerfile into an AST and performs rules on top of the AST. The rules aren't all security specific but they have good coverage across best practices.","title":"Module 2 Dockerfile Linting"},{"location":"02-linting/#view-your-codebuild-project","text":"For each AWS CodePipeline stage you'll be using AWS CodeBuild , which is a continuous integration service that compiles source code, runs tests, and produces software packages that are ready to deploy. The CodeBuild project for Dockerfile linting has already been created but hasn't been properly configured. Click here to view your CodeBuild project","title":"View your CodeBuild Project"},{"location":"02-linting/#create-the-build-spec-file","text":"Each CodeBuild project contains a build specification (build spec) file, which is a collection of build commands and related settings, in YAML format, that CodeBuild uses to run a build. This is the file where you define the commands for doing Dockerfile linting using Hadolint. Click on your Cloud9 IDE tab. In the left file tree, expand the container-devsecops-wksp-config folder and open buildspec_dockerfile.yml . Paste the YAML below and save the file. version : 0.2 phases : pre_build : commands : - echo Copying hadolint.yml to the application directory - cp hadolint.yml $CODEBUILD_SRC_DIR_AppSource/hadolint.yml - echo Switching to the application directory - cd $CODEBUILD_SRC_DIR_AppSource - echo Pulling the hadolint docker image - docker pull hadolint/hadolint:v1.16.2 build : commands : - echo Build started on `date` - echo Scanning with Hadolint... - result=`docker run --rm -i -v ${PWD}/hadolint.yml:/.hadolint.yaml hadolint/hadolint:v1.16.2 hadolint -f json - Dockerfile` post_build : commands : - echo $result - aws ssm put-parameter --name codebuild-dockerfile-results --type String --value $result --overwrite - echo Build completed on `date`","title":"Create the Build Spec file"},{"location":"02-linting/#add-the-hadolint-configuration","text":"When using Hadolint you can optionally specify a configuration file to ignore certain rules you might not necessary care about as well as specify trusted registries. You can view all the current rules by scrolling down on the Hadolint github project In the left file tree, expand the container-devsecops-wksp-config folder and open hadolint.yml . Paste the YAML below and save the file. ignored : - DL3000 - DL3025 trustedRegistries : - examplecorp.com After you have successfully configured the Dockerfile linting stage, you can proceed to the next module.","title":"Add the Hadolint configuration"},{"location":"03-secrets-scanning/","text":"Module 3 Add a secrets scanning stage Time : 15 minutes Next, you need to setup a stage for identifying secrets throughout your code. For this stage you'll be leveraging trufflehog , a popular open source project for finding secrets accidentally committed in repositories. It essentially searches through git repositories for secrets, digging deep into commit history and branches. It identifies secrets by running entropy checks as well as high signal regex checks. View your CodeBuild Project The CodeBuild project for secrets scanning has already been created but hasn't been properly configured. Click here to view your CodeBuild project Create the Build Spec file Click on your Cloud9 IDE tab. In the left file tree, expand the container-devsecops-wksp-config folder and open buildspec_secrets.yml . Paste the YAML below and save the file. version : 0.2 phases : pre_build : commands : - echo Setting CodeCommit Credentials - git config --global credential.helper !aws codecommit credential-helper $@ - git config --global credential.UseHttpPath true - echo Copying secrets_config.json to the application directory - cp secrets_config.json $CODEBUILD_SRC_DIR_AppSource/secrets_config.json - echo Switching to the application directory - echo Installing pip and truffleHog - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py - python get-pip.py - pip install truffleHog build : commands : - echo Build started on `date` - echo Scanning with truffleHog... - result=`trufflehog --regex --rules secrets_config.json --entropy=False $APP_REPO_URL ` - if [ -z $var ]; then result= [] ; fi post_build : commands : - echo $result - aws ssm put-parameter --name codebuild-secrets-results --type String --value $result --overwrite - echo Build completed on `date` Add the trufflehog regex configuration When using trufflehog you can optionally specify a configuration file that contains custom regex checks. In the left file tree, expand the container-devsecops-wksp-config folder and open secrets_config.json . Paste the YAML below and save the file. { Slack Token : (xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32}) , RSA private key : -----BEGIN RSA PRIVATE KEY----- , SSH (OPENSSH) private key : -----BEGIN OPENSSH PRIVATE KEY----- , SSH (DSA) private key : -----BEGIN DSA PRIVATE KEY----- , SSH (EC) private key : -----BEGIN EC PRIVATE KEY----- , PGP private key block : -----BEGIN PGP PRIVATE KEY BLOCK----- , Facebook Oauth : [f|F][a|A][c|C][e|E][b|B][o|O][o|O][k|K].*[ |\\ ][0-9a-f]{32}[ |\\ ] , Twitter Oauth : [t|T][w|W][i|I][t|T][t|T][e|E][r|R].*[ |\\ ][0-9a-zA-Z]{35,44}[ |\\ ] , GitHub : [g|G][i|I][t|T][h|H][u|U][b|B].*[ |\\ ][0-9a-zA-Z]{35,40}[ |\\ ] , Google Oauth : (\\ client_secret\\ :\\ [a-zA-Z0-9-_]{24}\\ ) , AWS API Key : AKIA[0-9A-Z]{16} , Heroku API Key : [h|H][e|E][r|R][o|O][k|K][u|U].*[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12} , Generic Secret : [s|S][e|E][c|C][r|R][e|E][t|T].*[ |\\ ][0-9a-zA-Z]{32,45}[ |\\ ] , Generic API Key : [a|A][p|P][i|I][_]?[k|K][e|E][y|Y].*[ |\\ ][0-9a-zA-Z]{32,45}[ |\\ ] , Slack Webhook : https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24} , Google (GCP) Service-account : \\ type\\ : \\ service_account\\ , Twilio API Key : SK[a-z0-9]{32} , Password in URL : [a-zA-Z]{3,10}://[^/\\\\s:@]{3,20}:[^/\\\\s:@]{3,20}@.{1,100}[\\ \\\\s] } After you have successfully configured the secrets scanning stage, you can proceed to the next module.","title":"Module 3: Secrets Scanning"},{"location":"03-secrets-scanning/#module-3-add-a-secrets-scanning-stage","text":"Time : 15 minutes Next, you need to setup a stage for identifying secrets throughout your code. For this stage you'll be leveraging trufflehog , a popular open source project for finding secrets accidentally committed in repositories. It essentially searches through git repositories for secrets, digging deep into commit history and branches. It identifies secrets by running entropy checks as well as high signal regex checks.","title":"Module 3 Add a secrets scanning stage"},{"location":"03-secrets-scanning/#view-your-codebuild-project","text":"The CodeBuild project for secrets scanning has already been created but hasn't been properly configured. Click here to view your CodeBuild project","title":"View your CodeBuild Project"},{"location":"03-secrets-scanning/#create-the-build-spec-file","text":"Click on your Cloud9 IDE tab. In the left file tree, expand the container-devsecops-wksp-config folder and open buildspec_secrets.yml . Paste the YAML below and save the file. version : 0.2 phases : pre_build : commands : - echo Setting CodeCommit Credentials - git config --global credential.helper !aws codecommit credential-helper $@ - git config --global credential.UseHttpPath true - echo Copying secrets_config.json to the application directory - cp secrets_config.json $CODEBUILD_SRC_DIR_AppSource/secrets_config.json - echo Switching to the application directory - echo Installing pip and truffleHog - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py - python get-pip.py - pip install truffleHog build : commands : - echo Build started on `date` - echo Scanning with truffleHog... - result=`trufflehog --regex --rules secrets_config.json --entropy=False $APP_REPO_URL ` - if [ -z $var ]; then result= [] ; fi post_build : commands : - echo $result - aws ssm put-parameter --name codebuild-secrets-results --type String --value $result --overwrite - echo Build completed on `date`","title":"Create the Build Spec file"},{"location":"03-secrets-scanning/#add-the-trufflehog-regex-configuration","text":"When using trufflehog you can optionally specify a configuration file that contains custom regex checks. In the left file tree, expand the container-devsecops-wksp-config folder and open secrets_config.json . Paste the YAML below and save the file. { Slack Token : (xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32}) , RSA private key : -----BEGIN RSA PRIVATE KEY----- , SSH (OPENSSH) private key : -----BEGIN OPENSSH PRIVATE KEY----- , SSH (DSA) private key : -----BEGIN DSA PRIVATE KEY----- , SSH (EC) private key : -----BEGIN EC PRIVATE KEY----- , PGP private key block : -----BEGIN PGP PRIVATE KEY BLOCK----- , Facebook Oauth : [f|F][a|A][c|C][e|E][b|B][o|O][o|O][k|K].*[ |\\ ][0-9a-f]{32}[ |\\ ] , Twitter Oauth : [t|T][w|W][i|I][t|T][t|T][e|E][r|R].*[ |\\ ][0-9a-zA-Z]{35,44}[ |\\ ] , GitHub : [g|G][i|I][t|T][h|H][u|U][b|B].*[ |\\ ][0-9a-zA-Z]{35,40}[ |\\ ] , Google Oauth : (\\ client_secret\\ :\\ [a-zA-Z0-9-_]{24}\\ ) , AWS API Key : AKIA[0-9A-Z]{16} , Heroku API Key : [h|H][e|E][r|R][o|O][k|K][u|U].*[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12} , Generic Secret : [s|S][e|E][c|C][r|R][e|E][t|T].*[ |\\ ][0-9a-zA-Z]{32,45}[ |\\ ] , Generic API Key : [a|A][p|P][i|I][_]?[k|K][e|E][y|Y].*[ |\\ ][0-9a-zA-Z]{32,45}[ |\\ ] , Slack Webhook : https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24} , Google (GCP) Service-account : \\ type\\ : \\ service_account\\ , Twilio API Key : SK[a-z0-9]{32} , Password in URL : [a-zA-Z]{3,10}://[^/\\\\s:@]{3,20}:[^/\\\\s:@]{3,20}@.{1,100}[\\ \\\\s] } After you have successfully configured the secrets scanning stage, you can proceed to the next module.","title":"Add the trufflehog regex configuration"},{"location":"04-vuln-scanning/","text":"Module 4 Add a vulnerability scanning stage Attendees will learn about the security considerations around building container images and then apply those learnings by embedding security testing into a CI/CD pipeline that's used for building, shipping, and deploying a container based application. They will get hands-on experience integrating security testing such as static analysis of Dockerfiles and application code, vulnerability assessments of images, and signing of images using a variety of open source projects. At the end of the workshop they'll have a fully automated CI/CD pipeline with embedded security testing that they can use to deploy an application. Level : Intermediate Duration : 2 - 3 hours CSF Functions : Prevent CAF Components : Preventative Prerequisites : AWS Account, Admin IAM User Scenario Architecture Presentation deck Region Modules","title":"Module 4: Vulnerability Scanning"},{"location":"04-vuln-scanning/#module-4-add-a-vulnerability-scanning-stage","text":"Attendees will learn about the security considerations around building container images and then apply those learnings by embedding security testing into a CI/CD pipeline that's used for building, shipping, and deploying a container based application. They will get hands-on experience integrating security testing such as static analysis of Dockerfiles and application code, vulnerability assessments of images, and signing of images using a variety of open source projects. At the end of the workshop they'll have a fully automated CI/CD pipeline with embedded security testing that they can use to deploy an application. Level : Intermediate Duration : 2 - 3 hours CSF Functions : Prevent CAF Components : Preventative Prerequisites : AWS Account, Admin IAM User","title":"Module 4 Add a vulnerability scanning stage"},{"location":"04-vuln-scanning/#scenario","text":"","title":"Scenario"},{"location":"04-vuln-scanning/#architecture","text":"","title":"Architecture"},{"location":"04-vuln-scanning/#presentation-deck","text":"","title":"Presentation deck"},{"location":"04-vuln-scanning/#region","text":"","title":"Region"},{"location":"04-vuln-scanning/#modules","text":"","title":"Modules"},{"location":"05-review/","text":"Cleaup Attendees will learn about the security considerations around building container images and then apply those learnings by embedding security testing into a CI/CD pipeline that's used for building, shipping, and deploying a container based application. They will get hands-on experience integrating security testing such as static analysis of Dockerfiles and application code, vulnerability assessments of images, and signing of images using a variety of open source projects. At the end of the workshop they'll have a fully automated CI/CD pipeline with embedded security testing that they can use to deploy an application. Level : Intermediate Duration : 2 - 3 hours CSF Functions : Prevent CAF Components : Preventative Prerequisites : AWS Account, Admin IAM User Scenario Architecture Presentation deck Region Modules","title":"Cleaup"},{"location":"05-review/#cleaup","text":"Attendees will learn about the security considerations around building container images and then apply those learnings by embedding security testing into a CI/CD pipeline that's used for building, shipping, and deploying a container based application. They will get hands-on experience integrating security testing such as static analysis of Dockerfiles and application code, vulnerability assessments of images, and signing of images using a variety of open source projects. At the end of the workshop they'll have a fully automated CI/CD pipeline with embedded security testing that they can use to deploy an application. Level : Intermediate Duration : 2 - 3 hours CSF Functions : Prevent CAF Components : Preventative Prerequisites : AWS Account, Admin IAM User","title":"Cleaup"},{"location":"05-review/#scenario","text":"","title":"Scenario"},{"location":"05-review/#architecture","text":"","title":"Architecture"},{"location":"05-review/#presentation-deck","text":"","title":"Presentation deck"},{"location":"05-review/#region","text":"","title":"Region"},{"location":"05-review/#modules","text":"","title":"Modules"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}